<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:shared="clr-namespace:Syncfusion.Windows.Shared;assembly=Syncfusion.Shared.WPF"
    xmlns:tools="clr-namespace:Syncfusion.Windows.Tools.Controls;assembly=Syncfusion.Tools.WPF"
    xmlns:provider="clr-namespace:Syncfusion.SfSkinManager;assembly=Syncfusion.SfSkinManager.WPF"
    xmlns:windows_shared="clr-namespace:Syncfusion.Windows;assembly=Syncfusion.Shared.Wpf">

    <ResourceDictionary.MergedDictionaries>
        <provider:ResourceDictionaryProvider DictionaryName="Common" ThemeName="MaterialDark"/>
        <provider:ResourceDictionaryProvider DictionaryName="Brushes" ThemeName="MaterialDark"/>
        <ResourceDictionary Source="/Syncfusion.Themes.MaterialDark.WPF;component/MSControl/Separator.xaml" />
        <ResourceDictionary Source="/Syncfusion.Themes.MaterialDark.WPF;component/Ribbon/RibbonButton.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <!--  Ribbon Minimize Button  -->
    <Style x:Key="SyncfusionMinimizeRibbonToggleButtonStyle" TargetType="{x:Type tools:RibbonToggleButton}">
        <Setter Property="Height" Value="22" />
        <Setter Property="Width" Value="29" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type tools:RibbonToggleButton}">
                    <Grid>
                        <Border
                            x:Name="border"
                            Width="29"
                            Height="22"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Stretch"
                            Background="Transparent">
                            <Grid>
                                <Path
                                    x:Name="path1"
                                    Width="7"
                                    Height="5"
                                    VerticalAlignment="Center"
                                    Data="M4.0209999,0 L5.313,0 5.313,1.3329999 6.6670001,1.3329999 6.6670001,2.667 7.9789999,2.667 7.9999998,2.667 7.9999998,3.9380001 9.3329999,3.9380001 9.3329999,6.6670001 6.6460001,6.6670001 6.6460001,5.313 5.3329999,5.313 5.3329999,3.9790001 5.313,3.9790001 5.313,4 4.0209999,4 4.0209999,3.9790001 4,3.9790001 4,5.313 2.6869999,5.313 2.6869999,6.6670001 0,6.6670001 0,3.9580001 &#10;1.333,3.9580001 1.333,2.667 1.3539999,2.667 2.6869999,2.667 2.6869999,1.3329999 4.0209999,1.3329999 z"
                                    Fill="{StaticResource IconColor}"
                                    Stretch="Fill" />
                                <Path
                                    x:Name="path2"
                                    Width="10"
                                    Height="8"
                                    Data="M5,0 L6,0 8,2 14,2 14,1 16,1 16,9 14,9 14,8 8,8 6,10 5,10 5,6 0,6 0,4 5,4 z"
                                    Fill="{StaticResource IconColor}"
                                    Stretch="Fill"
                                    Visibility="Collapsed" />
                            </Grid>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type tools:Ribbon}}, Path=RibbonState}" Value="Normal"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type tools:Ribbon}}, Path=(tools:SimplifiedLayoutSettings.LayoutMode)}" Value="Normal"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="path2" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="path1" Property="Visibility" Value="Visible" />
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type tools:Ribbon}}, Path=RibbonState}" Value="Normal"/>
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type tools:Ribbon}}, Path=(tools:SimplifiedLayoutSettings.LayoutMode)}" Value="Simplified"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="path2" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="path1" Property="Visibility" Value="Visible" />
                            <Setter TargetName="path1" Property="LayoutTransform">
                                <Setter.Value>
                                    <RotateTransform Angle="180"></RotateTransform>
                                </Setter.Value>
                            </Setter>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type tools:Ribbon}}, Path=RibbonState}" Value="Adorner">
                            <Setter TargetName="path2" Property="Visibility" Value="Visible" />
                            <Setter TargetName="path1" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="path2" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type tools:RibbonWindow}}, Path=BackStageColor}" />
                            <Setter TargetName="path1" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type tools:RibbonWindow}}, Path=BackStageColor}" />
                            <Setter TargetName="border" Property="Background" Value="{StaticResource SecondarySelectionBackground}" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="border" Property="Background" Value="{StaticResource SecondaryHoverBackground}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsKeyboardFocusWithin" Value="True" />
                                <Condition Property="IsPressed" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="path2" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type tools:RibbonWindow}}, Path=BackStageColor}" />
                            <Setter TargetName="path1" Property="Fill" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type tools:RibbonWindow}}, Path=BackStageColor}" />
                            <Setter TargetName="border" Property="Background" Value="{StaticResource SecondaryHoverBackground}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	
	<DataTemplate x:Key="LargeIconTemplate">
        <Image  x:Name="LargeImage" RenderOptions.BitmapScalingMode="NearestNeighbor"
               Width="26" Height="26" Stretch="{Binding Path=IconStretch, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
			   Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
    </DataTemplate>

    <DataTemplate x:Key="SmallIconTemplate">
        <Image x:Name="smallimage" Stretch="{Binding Path=IconStretch, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                          Width="{Binding IconWidth, RelativeSource={RelativeSource TemplatedParent}}" Height="{Binding IconHeight, RelativeSource={RelativeSource TemplatedParent}}"   
						             RenderOptions.BitmapScalingMode="NearestNeighbor"
						  Source="{Binding Tag, RelativeSource={RelativeSource TemplatedParent}}"/>
    </DataTemplate>

    <ControlTemplate x:Key="LargeModeTempalte" TargetType="tools:RibbonToggleButton">
       <Border
                            Name="ItemBorder1"
                            MinHeight="22"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="3"
                            SnapsToDevicePixels="True"
                            >
                            <Border
                                x:Name="InnerBorder1"
                                Margin="1,1,1,0"
                                Background="Transparent"
                                CornerRadius="{StaticResource MaterialDark.ThemeCornerRadiusVariant1}">
                                <StackPanel Margin="{TemplateBinding Padding}">
                                    <Border Name="PART_ImageBorderLarge">

                        <ContentPresenter x:Name="LargeIconContent" ContentTemplate="{TemplateBinding IconTemplate}" Content="{Binding}" Margin="2"
                                                          ContentTemplateSelector="{TemplateBinding IconTemplateSelector}"/>
                    </Border>
                    <TextBlock x:Name="PART_LargeText" 
                                               Focusable="False"
                                               VerticalAlignment="{TemplateBinding VerticalContentAlignment}"                           
                                               HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                               Text="{TemplateBinding Label}"
                                               Margin="2,0,4,0">
                </TextBlock>
                </StackPanel>
            </Border>
        </Border>
        <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter TargetName="InnerBorder1" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ItemBorder1" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter TargetName="InnerBorder1" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ItemBorder1" Property="Border.Background" Value="Transparent" />
                        </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IconTemplate" Value="{x:Null}"/>
                    <Condition Property="IconTemplateSelector" Value="{x:Null}"/>
                </MultiTrigger.Conditions>
                <Setter Property="ContentTemplate" TargetName="LargeIconContent" Value="{StaticResource LargeIconTemplate}"/>
                <Setter Property="Tag" TargetName="LargeIconContent" Value="{Binding LargeIcon, RelativeSource={RelativeSource TemplatedParent}}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!--  Ribbon ToggleButton Style  -->
    <Style x:Key="SyncfusionRibbonToggleButtonStyle" TargetType="tools:RibbonToggleButton">
        <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
        <Setter Property="SmallIcon" Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt16.png" />
        <Setter Property="LargeIcon" Value="/Syncfusion.Shared.WPF;component//Controls/ButtonControls/Images/WordArt32.png" />
        <Setter Property="Label" Value="RibbonToggleButton" />
        <Setter Property="BorderThickness" Value="{StaticResource MaterialDark.BorderThickness1}" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="MinHeight" Value="22" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="tools:RibbonToggleButton">
                    <Grid>
                        <Border
                            x:Name="ItemCheckedBorder"
                            Background="Transparent"
                            BorderBrush="Transparent"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Opacity="0" />
                        <Border
                            Name="ItemBorder"
                            MinHeight="22"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{StaticResource MaterialDark.CornerRadius2}"
                            SnapsToDevicePixels="True">
                            <Border
                                x:Name="InnerBorder"
                                Margin="1,1,1,0"
                                Background="Transparent"
                                CornerRadius="{StaticResource MaterialDark.ThemeCornerRadiusVariant1}">
                                <Grid Margin="{TemplateBinding Padding}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition />
                                    </Grid.ColumnDefinitions>
                                    <Border Name="PART_ImageBorder" Grid.Column="0">
                                           <ContentPresenter x:Name="SmallIconContent" ContentTemplate="{TemplateBinding IconTemplate}" Content="{Binding}" Margin="2"
                                                          ContentTemplateSelector="{TemplateBinding IconTemplateSelector}"/>
                                    </Border>
                                    <AccessText
                                        x:Name="PART_Text"
                                        Grid.Column="1"
                                        Margin="2,0,4,0"
                                        HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalAlignment}"
                                        FontFamily="{TemplateBinding FontFamily}"
                                        FontSize="{TemplateBinding FontSize}"
                                        Foreground="{TemplateBinding Foreground}"
                                        Text="{TemplateBinding Label}" />
                                </Grid>
                            </Border>
                        </Border>
                    </Grid>
					<ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondaryHoverBackground}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter TargetName="InnerBorder" Property="Border.Background" Value="{StaticResource SecondarySelectionBackground}" />
                            <Setter Property="Foreground" Value="{StaticResource SecondaryForeground}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="ItemBorder" Property="Border.Background" Value="Transparent" />
                        </Trigger>
						<Trigger Property="SizeMode" Value="Small">
                            <Setter Property="Visibility" TargetName="PART_Text" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IconTemplate" Value="{x:Null}"/>
                                <Condition Property="IconTemplateSelector" Value="{x:Null}"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="ContentTemplate" TargetName="SmallIconContent" Value="{StaticResource SmallIconTemplate}"/>
                            <Setter Property="Tag" TargetName="SmallIconContent" Value="{Binding SmallIcon, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
		<Style.Triggers>
            <Trigger Property="SizeMode" Value="Large">
                <Setter Property="Template" Value="{StaticResource LargeModeTempalte}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    <Style BasedOn="{StaticResource SyncfusionRibbonToggleButtonStyle}" TargetType="tools:RibbonToggleButton" />

</ResourceDictionary>
